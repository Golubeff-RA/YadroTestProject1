Инструкция по сборке проекта:
Для сборки и компиляции используется CMake версии не ниже 3.5, компилятор MinGW
1) В командной строке перейдите в папку ..\YadroTestProject с помощью команды: 
   cd <путь до папки>
2) Создайте папку "build" c помощью команды: mkdir build
3) Перейдите в эту папку с помощью команды: cd build
4) С помощью команды: cmake -help вызовите список доступных генераторов
   генератор по умолчанию будет помечен звёздочкой.
5) С помощью команды: cmake -G "<генератор по умолчанию>
   (например Visual Studio 17 2022)" ..   создайте файлы проекта
6) C помощью команды: cmake --build . --config Release --target testProject
7) Из папки YadroTestProject скопируйте файл с данными test_file.txt в папку
   ..\YardoTestProject\bin\Release, где уже должен быть файл testProject.exe

Запуск программы:
	в командной строке перейдите в папку ..\YardoTestProject\bin\Release
	и запустите программу командой: testProject.exe test_file.txt

Немного о структуре проекта:

class myTime реализует временные метки в формате ЧЧ:ММ
class event для хранения данных из входных событий
	в формате <myTime время><int ID><string Имя клиента><int ID компьютера>
class computer для хранения информации о "занятости", времени работы
	и времени аренды 

в main.cpp помимо основной логики прописаны "валидаторы" для проверки
	входных данных: для int - validInt(string); для myTime - validMyTime(string);
	для event - validEvent(string, event *)(при "удачном вводе" запишет данные
	в объект класса event)

структуры данных:
	-имена клиентов хранятся в map<string,int> string - уникальное имя клиента
	int - номер компьютера, за которым сидит пользователь (если не сидит, то -1)0
	-компьютеры хранит vector<computer>(число компьютеров)
	-очередь ожидания стола хранится в queue<string> string - уникальное имя клиента

Алгоритм работы main():
	-проверяем есть ли имя файла в аргументах при запуске программы
	-проверяем открылся ли на чтение файл с данными
	-считываем входные константы, проверяя их "валидность"
	-в цикле while считываем строки файла и после проверки на
	 корректный ввод обрабатываем входящее событие согласно алгоритму в задании
	-после завершения while в цикле for пробегаемся по мапе и выводим события
	 "клиет ушел" в лексикографическом порядке имён клиентов (для тех кто на
	 момент закрытия клуба был за компьютером ещё и "завершаем" сеанс методом
	 clientUp()
	-выводим статистику работы компьютеров за рабочий день.



